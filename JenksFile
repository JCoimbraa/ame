pipeline {
    agent { node { label 'linux && jdk8' } }

    parameters {
       choice(
           name: 'DEPLOY_ENV',
           choices: ['TODOS', 'DEV', 'HML'],
           description: ''
       )
    }

    environment {
        DEPLOY_PASS     = credentials('deploy_pass')
        DEPLOY_USER     = credentials('deploy_user')
        AZURE_SUBSCRIPTION_ID = credentials('azureSubscriptionId')
        AZURE_TENANT_ID = credentials('azureTenantId')
        AZURE_APP_ID    = credentials('azureAppId')
        AZURE_APP_PASS  = credentials('azureAppPass')
        SONAR_TOKEN     = credentials('sonar_token')
        SONAR_URL       = credentials('sonar_url')
        NEXUS_BASE_URL  = credentials('nexus_base_url')
        NEXUS_USER 		= credentials('nexus_user')
        NEXUS_PASS 		= credentials('nexus_pass')
        NEXUS_URL       = credentials('nexus_url')
        DOCKER_REPOSITORY = credentials('DOCKER_REPOSITORY ')
        DOCKER_USER_LOGIN = credentials('DOCKER_USER_LOGIN ')
        DOCKER_USER_PASS = credentials('DOCKER_USER_PASS ')
		KUBECONFIG_DEV = credentials('kubeconfig_dev')
		KUBECONFIG_HML = credentials('kubeconfig_hml')
		KUBECONFIG_PRD01 = credentials('kubeconfig_prd01')
		KUBECONFIG_PRD02 = credentials('kubeconfig_prd02')
        DASA_FORTIFY_TOKEN = credentials('dasa_fortify_token')
    }

    options {
        timeout(time: 5, unit: 'HOURS')
    }

    stages {

        stage('DevOps-Tools') {
            steps {
                sh 'rm -rf check.status'
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'devops-tools']], submoduleCfg: [], userRemoteConfigs: [[url: 'git@bitbucket.org:dasa_desenv_middleware/devops-tools.git']]])
            	checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'test']], submoduleCfg: [], userRemoteConfigs: [[url: 'git@bitbucket.org:dasa_desenv_middleware/dasa-higia-test.git']]])
            }
        }

        stage('Unit Test') {
            steps {
                sh 'bash -x devops-tools/pipeline-shared-librares/unit-tests.sh'
            }
        }

        stage('Tagging') {
            steps {
                sh 'devops-tools/pipeline-shared-librares/tagging.sh'
            }
        }

         stage('Compile Sass') {
            steps {
				 echo 'Compilacao Sass'
                 sh 'gem install -q compass'
                 sh 'cd src/main/resources/static/ && compass compile -s compressed'
            }
        }

        stage('Parallel Build App') {
            steps {
                parallel(
                    'Build Fortify': {
                        sh 'devops-tools/pipeline-shared-librares/build-fortify.sh'
                    },
                    'Build App': {
                        sh 'devops-tools/pipeline-shared-librares/build-package.sh'
                    }
                )
            }
        }

        stage('Upload Artifact') {
            steps {
                sh 'devops-tools/pipeline-shared-librares/nexus-upload.sh'
            }
        }

        stage('Parallel Quality Analyzing') {
            steps {
                parallel(
                    'Security Analyzing Fortify': {
                        sh 'devops-tools/pipeline-shared-librares/quality-fortify.sh'
                    },
                    'Quality Analyzing': {
                        withSonarQubeEnv('SonarQube') {
                            sh 'devops-tools/pipeline-shared-librares/quality.sh -a analize'
                        }
                    }
                )
            }
        }

        stage('Deploy Dev') {
            when {
                expression {
                    params.DEPLOY_ENV ==~ /TODOS|DEV/
                }
            }
            steps {
            	script{
		            try{
		                /* sh 'bash -x devops/scripts/certificates.sh -a higia-app-dev -r rsg_higia_dev -e dev -s qa'
		                sh 'bash -x devops/scripts/deploy.sh -a higia-app-dev -r rsg_higia_dev -s qa'
		                sh 'bash -x devops/scripts/deploy_web_config.sh -a higia-app-dev -r rsg_higia_dev -s qa'
		                sh 'bash -x devops-tools/pipeline-shared-librares/check_upstart_app.sh -u https://higia-app-dev-qa.azurewebsites.net/actuator/health -s 200 -t 60 -c 5 -e dev'
                        sh 'bash -x devops/scripts/certificates.sh -a higia-app-dev -r rsg_higia_dev -e dev'
		            	sh 'bash -x devops/scripts/swap-package.sh -a higia-app-dev -r rsg_higia_dev -s qa -t production'
		            	sh 'bash -x devops/scripts/stop.sh -a higia-app-dev -r rsg_higia_dev -s qa' */

		            	sh 'bash -x devops/scripts/certificates.sh -a higia-app-dev -r rsg_higia_dev -e hml'
                        sh 'bash -x devops/scripts/deploy_web_config.sh -a higia-app-dev -r rsg_higia_dev'
                        sh 'bash -x devops/scripts/deploy.sh -a higia-app-dev -r rsg_higia_dev'
                        sh 'bash -x devops-tools/pipeline-shared-librares/check_upstart_app.sh -u https://higia-app-dev.azurewebsites.net/actuator/health -s 200 -t 60 -c 5 -e dev'
		            }catch(exec){
		            	error("Deploy failed, returning the previous version")
		            }
	            }
	        } 
        }

		/* stage('Security Owasp Zap Dev') {
            when {
                expression {
                    params.DEPLOY_ENV ==~ /TODOS|DEV/
                }
            }
            steps {
                script {
                    sh 'bash -x devops-tools/pipeline-shared-librares/security.sh -u https://higia-app-dev.azurewebsites.net/actuator/health -o higia-app-dev'
                }
            }
        } */

       stage('Performance Test'){
           steps{
               echo 'Performance Test'
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'devops']], submoduleCfg: [], userRemoteConfigs: [[url: 'git@bitbucket.org:dasa_desenv_middleware/dasa-higia-test-performance.git']]])
                dir("devops") {
                    sh 'bash -x scripts/start.sh'
                }
           }
        } 

        stage('Regressive Tests') {
            when {
                expression {
                    params.DEPLOY_ENV ==~ /TODOS|DEV/
                }
            }
            steps {
				 echo 'Regressive Tests'
                 sh 'docker build -f test/Dockerfile . -t dasa/teste-higia-front:latest'
                 sh 'docker run --rm dasa/teste-higia-front:latest cucumber headless=true --retry 3'
            }
        }

		stage('Quality Gates') {
            steps {
                script {
                    timeout(time: 30, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gates failure: ${qg.status}"
                            } else {
                                echo "Quality gates returned ok, with result: ${qg.status}"
                            }
                    }
                }
            }
        }

        stage('Approved to hml') {
            when {
                expression {
                    params.DEPLOY_ENV ==~ /TODOS|HML/
                }
            }
            options {
                timeout(time: 600, unit: 'SECONDS') 
            }
            steps {
                input(
                    id: 'Proceed', message: 'Was this successful?', parameters: [
                    [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Package Approved to deploy in hml ? (Click "Proceed" to continue)']
                ])
            }
        }
        
        stage('Deploy hml') {
            when {
                expression {
                    params.DEPLOY_ENV ==~ /TODOS|HML/
                }
            }
            steps {
                input message: 'Deploy package in HML? (Click "Proceed" to continue)'
                sh 'bash -x devops/scripts/certificates.sh -a higia-app-hml -r rsg_higia_hml -e hml'
                sh 'bash -x devops/scripts/deploy_web_config.sh -a higia-app-hml -r rsg_higia_hml'
                sh 'bash -x devops/scripts/deploy.sh -a higia-app-hml -r rsg_higia_hml'
                sh 'bash -x devops-tools/pipeline-shared-librares/check_upstart_app.sh -u https://higia-app-hml.azurewebsites.net/actuator/health -s 200 -t 60 -c 5 -e hml'
            }
        }

		/* stage('Security Owasp Zap Hml') {
            when {
                expression {
                    params.DEPLOY_ENV ==~ /TODOS|HML/
                }
            }
            steps {
                script {
                    sh 'bash -x devops-tools/pipeline-shared-librares/security.sh -u https://higia-app-hml.azurewebsites.net/actuator/health -o higia-app-hml'
                }
            }
        } */

    }
}